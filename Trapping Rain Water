class Solution:
    # @param A, a list of integers
    # @return an integer
    def trap(self, A):
        # corner case:
        # 1. len(A) <= 2
        # 2. same heights for all bars
        max_from_left = [0 for itr in xrange(len(A))]
        max_left = 0
        for i in xrange(len(A)-1, -1, -1):
            if A[i] > max_left:
                max_left = A[i]
            max_from_left[i] = max_left
        max_from_right = [0 for itr in xrange(len(A))]
        max_right = 0
        for i in xrange(len(A)):
            if A[i] > max_right:
                max_right = A[i]
            max_from_right[i] = max_right
        return sum(map(lambda x: min(x[0], x[1]) - x[2], zip(max_from_left, max_from_right, A)))
