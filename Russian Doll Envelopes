class Solution(object):
    def maxEnvelopes(self, envelopes):
        """
        :type envelopes: List[List[int]]
        :rtype: int
        """
 
        def lower_bound(arrays, L, R, x):
            while L < R:
                mid = (L + R) >> 1
                if x <= arrays[mid]:
                    R = mid
                else:
                    L = mid + 1
            return L
 
        if not envelopes: return 0
        A = sorted(envelopes, lambda x, y: x[0] - y[0] if x[0] != y[0] else y[1] - x[1])
        n = len(A)
        dp = [1] * n
        g = [0x7fffffff] * (n + 1)
        for i in xrange(n):
            k = lower_bound(g, 1, n, A[i][1])
            dp[i] = k
            g[k] = A[i][1]
        return max(dp)
